// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/job.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api/job.proto

It has these top-level messages:
	InitReq
	InitResp
	RunReq
	RunResp
	LogReq
	LogResp
	LogStreamReq
	LogStreamResp
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InitReq struct {
}

func (m *InitReq) Reset()                    { *m = InitReq{} }
func (m *InitReq) String() string            { return proto.CompactTextString(m) }
func (*InitReq) ProtoMessage()               {}
func (*InitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type InitResp struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *InitResp) Reset()                    { *m = InitResp{} }
func (m *InitResp) String() string            { return proto.CompactTextString(m) }
func (*InitResp) ProtoMessage()               {}
func (*InitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InitResp) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RunReq struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *RunReq) Reset()                    { *m = RunReq{} }
func (m *RunReq) String() string            { return proto.CompactTextString(m) }
func (*RunReq) ProtoMessage()               {}
func (*RunReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RunReq) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RunResp struct {
}

func (m *RunResp) Reset()                    { *m = RunResp{} }
func (m *RunResp) String() string            { return proto.CompactTextString(m) }
func (*RunResp) ProtoMessage()               {}
func (*RunResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type LogReq struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *LogReq) Reset()                    { *m = LogReq{} }
func (m *LogReq) String() string            { return proto.CompactTextString(m) }
func (*LogReq) ProtoMessage()               {}
func (*LogReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LogReq) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type LogResp struct {
	Lines []string `protobuf:"bytes,1,rep,name=lines" json:"lines,omitempty"`
}

func (m *LogResp) Reset()                    { *m = LogResp{} }
func (m *LogResp) String() string            { return proto.CompactTextString(m) }
func (*LogResp) ProtoMessage()               {}
func (*LogResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LogResp) GetLines() []string {
	if m != nil {
		return m.Lines
	}
	return nil
}

type LogStreamReq struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *LogStreamReq) Reset()                    { *m = LogStreamReq{} }
func (m *LogStreamReq) String() string            { return proto.CompactTextString(m) }
func (*LogStreamReq) ProtoMessage()               {}
func (*LogStreamReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *LogStreamReq) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type LogStreamResp struct {
	Line string `protobuf:"bytes,1,opt,name=line" json:"line,omitempty"`
}

func (m *LogStreamResp) Reset()                    { *m = LogStreamResp{} }
func (m *LogStreamResp) String() string            { return proto.CompactTextString(m) }
func (*LogStreamResp) ProtoMessage()               {}
func (*LogStreamResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *LogStreamResp) GetLine() string {
	if m != nil {
		return m.Line
	}
	return ""
}

func init() {
	proto.RegisterType((*InitReq)(nil), "api.InitReq")
	proto.RegisterType((*InitResp)(nil), "api.InitResp")
	proto.RegisterType((*RunReq)(nil), "api.RunReq")
	proto.RegisterType((*RunResp)(nil), "api.RunResp")
	proto.RegisterType((*LogReq)(nil), "api.LogReq")
	proto.RegisterType((*LogResp)(nil), "api.LogResp")
	proto.RegisterType((*LogStreamReq)(nil), "api.LogStreamReq")
	proto.RegisterType((*LogStreamResp)(nil), "api.LogStreamResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Job service

type JobClient interface {
	Init(ctx context.Context, in *InitReq, opts ...grpc.CallOption) (*InitResp, error)
	Run(ctx context.Context, in *RunReq, opts ...grpc.CallOption) (*RunResp, error)
}

type jobClient struct {
	cc *grpc.ClientConn
}

func NewJobClient(cc *grpc.ClientConn) JobClient {
	return &jobClient{cc}
}

func (c *jobClient) Init(ctx context.Context, in *InitReq, opts ...grpc.CallOption) (*InitResp, error) {
	out := new(InitResp)
	err := grpc.Invoke(ctx, "/api.Job/Init", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobClient) Run(ctx context.Context, in *RunReq, opts ...grpc.CallOption) (*RunResp, error) {
	out := new(RunResp)
	err := grpc.Invoke(ctx, "/api.Job/Run", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Job service

type JobServer interface {
	Init(context.Context, *InitReq) (*InitResp, error)
	Run(context.Context, *RunReq) (*RunResp, error)
}

func RegisterJobServer(s *grpc.Server, srv JobServer) {
	s.RegisterService(&_Job_serviceDesc, srv)
}

func _Job_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Job/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).Init(ctx, req.(*InitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Job_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Job/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).Run(ctx, req.(*RunReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Job_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Job",
	HandlerType: (*JobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _Job_Init_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _Job_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/job.proto",
}

// Client API for Log service

type LogClient interface {
	Get(ctx context.Context, in *LogReq, opts ...grpc.CallOption) (*LogResp, error)
	GetStream(ctx context.Context, in *LogStreamReq, opts ...grpc.CallOption) (Log_GetStreamClient, error)
}

type logClient struct {
	cc *grpc.ClientConn
}

func NewLogClient(cc *grpc.ClientConn) LogClient {
	return &logClient{cc}
}

func (c *logClient) Get(ctx context.Context, in *LogReq, opts ...grpc.CallOption) (*LogResp, error) {
	out := new(LogResp)
	err := grpc.Invoke(ctx, "/api.Log/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) GetStream(ctx context.Context, in *LogStreamReq, opts ...grpc.CallOption) (Log_GetStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Log_serviceDesc.Streams[0], c.cc, "/api.Log/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &logGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Log_GetStreamClient interface {
	Recv() (*LogStreamResp, error)
	grpc.ClientStream
}

type logGetStreamClient struct {
	grpc.ClientStream
}

func (x *logGetStreamClient) Recv() (*LogStreamResp, error) {
	m := new(LogStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Log service

type LogServer interface {
	Get(context.Context, *LogReq) (*LogResp, error)
	GetStream(*LogStreamReq, Log_GetStreamServer) error
}

func RegisterLogServer(s *grpc.Server, srv LogServer) {
	s.RegisterService(&_Log_serviceDesc, srv)
}

func _Log_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Log/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).Get(ctx, req.(*LogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServer).GetStream(m, &logGetStreamServer{stream})
}

type Log_GetStreamServer interface {
	Send(*LogStreamResp) error
	grpc.ServerStream
}

type logGetStreamServer struct {
	grpc.ServerStream
}

func (x *logGetStreamServer) Send(m *LogStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

var _Log_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Log",
	HandlerType: (*LogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Log_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       _Log_GetStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/job.proto",
}

func init() { proto.RegisterFile("api/job.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0xd7, 0x65, 0xae, 0xe6, 0xd8, 0x0a, 0x1e, 0xbc, 0x28, 0xbd, 0xd0, 0x11, 0x11, 0x76,
	0x55, 0x65, 0x82, 0xaf, 0x30, 0x94, 0x5e, 0x48, 0x7c, 0x82, 0x94, 0x85, 0x12, 0xd1, 0xe6, 0x6c,
	0xc9, 0xde, 0x5f, 0x92, 0x54, 0x1d, 0x6e, 0x77, 0xe7, 0x3f, 0xff, 0x77, 0x4a, 0x3f, 0x02, 0xa5,
	0x22, 0xf3, 0xf0, 0x61, 0xbb, 0x86, 0x76, 0xd6, 0x5b, 0x64, 0x8a, 0x8c, 0xe0, 0x90, 0xbf, 0x0c,
	0xc6, 0x4b, 0xbd, 0x15, 0x35, 0x9c, 0xa7, 0xd1, 0x11, 0x5e, 0xc2, 0xd4, 0x6c, 0xaa, 0x6c, 0x91,
	0x2d, 0x4b, 0x39, 0x35, 0x1b, 0x51, 0xc1, 0x5c, 0xee, 0x07, 0xa9, 0xb7, 0x47, 0x0d, 0x87, 0x3c,
	0x36, 0x8e, 0x02, 0xd4, 0xda, 0xfe, 0x14, 0x74, 0x0b, 0x79, 0x6c, 0x1c, 0xe1, 0x35, 0x9c, 0x7d,
	0x9a, 0x41, 0xbb, 0x2a, 0x5b, 0xb0, 0x25, 0x97, 0x29, 0x88, 0x1b, 0x28, 0x5a, 0xdb, 0xbf, 0xfb,
	0x9d, 0x56, 0x5f, 0xa7, 0x3e, 0x70, 0x07, 0xe5, 0x41, 0xef, 0x08, 0x11, 0x66, 0xe1, 0x32, 0x22,
	0x5c, 0xc6, 0x79, 0xf5, 0x06, 0xec, 0xd5, 0x76, 0x78, 0x0f, 0xb3, 0xe0, 0x81, 0x45, 0xa3, 0xc8,
	0x34, 0xa3, 0x5d, 0x5d, 0x1e, 0x24, 0x47, 0x62, 0x82, 0x02, 0x98, 0xdc, 0x0f, 0x78, 0x11, 0xf7,
	0x49, 0xae, 0x2e, 0xfe, 0x42, 0x60, 0x56, 0x0a, 0x58, 0x6b, 0xfb, 0x80, 0xae, 0xb5, 0x1f, 0xd1,
	0xa4, 0x38, 0xa2, 0xa3, 0x95, 0x98, 0xe0, 0x33, 0xf0, 0xb5, 0xf6, 0xe9, 0x0f, 0xf1, 0xea, 0xa7,
	0xfc, 0x35, 0xaa, 0xf1, 0xff, 0x2a, 0x5c, 0x3d, 0x66, 0xdd, 0x3c, 0x3e, 0xc6, 0xd3, 0x77, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x3b, 0x1e, 0x0d, 0xda, 0x9d, 0x01, 0x00, 0x00,
}
